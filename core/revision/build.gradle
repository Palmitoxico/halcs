import org.ajoberstar.gradle.git.release.base.ReleasePluginExtension
import org.ajoberstar.gradle.git.release.base.ReleaseVersion
import org.ajoberstar.gradle.git.release.base.VersionStrategy
import org.ajoberstar.grgit.Commit
import org.ajoberstar.grgit.Grgit
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import br.lnls.dig.gradle.updatesemvermacrostask.UpdateSemVerMacrosTask

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: br.lnls.dig.gradle.nativedistribution.plugins.NativeDistributionPlugin
apply plugin: 'br.lnls.dig.gradle.nativerelease'
apply plugin: com.janitovff.grgit.config.GitConfigPlugin

model {
    components {
        revision(NativeLibrarySpec) {
            sources {
                c {
                    exportedHeaders.srcDir 'include'

                    lib project: ':libs:convc', library: 'convc'
                    lib project: ':libs:errhand', library: 'errhand'
                    lib project: ':libs:hutils', library: 'hutils'
                }
            }

            binaries.all {
                cCompiler.define "GIT_REVISION=\"$project.version\""
                cCompiler.define "GIT_USER_NAME=\"$gitConfig.user.name\""
                cCompiler.define "GIT_USER_EMAIL=\"$gitConfig.user.email\""
            }
        }
    }
}

release {
    def test = new CiReleaseVersionStrategy()
    versionStrategy test
    defaultVersionStrategy = test
}

task updateVersionMacros(type: UpdateSemVerMacrosTask) {
    macroPrefix 'HALCS_VERSION_'
    file project.file('include/revision.h')
}

class CiReleaseVersionStrategy implements VersionStrategy {
    private static final Logger logger =
        LoggerFactory.getLogger(CiReleaseVersionStrategy)

    @Override
    String getName() {
        return "ci_release"
    }

    @Override
    boolean selector(Project project, Grgit grgit) {
        String message = "" +
            "status: ${grgit.status().clean}\n" +
            "staged: ${grgit.status().staged.allChanges.size()}\n" +
            "unstaged: ${grgit.status().unstaged.allChanges}\n" +
            "conflicts: ${grgit.status().conflicts.size()}\n"
        throw new RuntimeException("STOP: $message")
        // Check if current HEAD is tagged
        getHeadVersion(project, grgit) != null
    }

    @Override
    ReleaseVersion infer(Project project, Grgit grgit) {
        String version = getHeadVersion(project, grgit)
        def releaseVersion = new ReleaseVersion(version, version, false)
        logger.info('Inferred version {} by strategy {}', releaseVersion, name)
        return releaseVersion
    }

    private String getHeadVersion(Project project, Grgit grgit) {
        def tagStrategy = project.extensions.getByType(ReleasePluginExtension).tagStrategy
        Commit head = grgit.head()
        return grgit.tag.list().findAll {
            it.commit == head
        }.collect {
            tagStrategy.parseTag(it)
        }.findAll {
            it != null
        }.max()?.toString()
    }
}
