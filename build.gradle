buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.3"
        classpath "org.ajoberstar:gradle-git:1.7.1"
    }
}

allprojects {
    apply plugin: 'c'
    apply plugin: 'br.lnls.dig.gradle.assemblevarianttask'
    apply plugin: 'br.lnls.dig.gradle.compilerflags'
    apply plugin: br.lnls.dig.gradle.currentplatform.CurrentPlatformPlugin
    apply plugin: 'br.lnls.dig.gradle.sanec'

    /* We only want to apply the sonarqube plugin if we are running standalone (vs as a subproject) */
    if (rootProject == project) {
        apply plugin: 'org.sonarqube'
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "br.com.lnls.dig.halcs"
            property "sonar.projectName", "HALCS Hardware Abstraction Layer for Control Systems"
            property "sonar.projectVersion", "v0.5"

            property "sonar.links.homepage", "https://github.com/lnls-dig/halcs"
            property "sonar.links.ci", "https://travis-ci.org/lnls-dig/halcs"
            property "sonar.links.scm", "https://github.com/lnls-dig/halcs"
            property "sonar.links.issue", "https://github.com/lnls-dig/halcs/issues"

            property "sonar.branch", "devel"

            property "sonar.cfamily.build-wrapper-output", "bw-output"
            property "sonar.cfamily.gcov.reportsPath", "."
        }
    }

    model {
        buildTypes {
            debug
            production
        }

        flavors {
            afcv3
            afcv3_1
            ml605
        }

        binaries {
            all {
                cCompiler.args '-std=gnu99', '-O2', '-g'
                cCompiler.args '-Wall', '-Wextra', '-Werror'

                cCompiler.define 'ERRHAND_MIN_LEVEL=DBG_LVL_INFO'
                cCompiler.define 'ERRHAND_SUBSYS_ON=(DBG_DEV_MNGR | ' +
                        'DBG_DEV_IO | DBG_SM_IO | DBG_LIB_CLIENT | ' +
                        'DBG_SM_PR | DBG_SM_CH | DBG_LL_IO | DBG_HAL_UTILS)'

                if (buildType == buildTypes.debug)
                    cCompiler.args '-g'

                if (flavor == flavors.afcv3)
                    cCompiler.define '__BOARD_AFCV3__'
                else if (flavor == flavors.afcv3_1) {
                    cCompiler.define '__BOARD_AFCV3__'
                    cCompiler.define '__BOARD_AFCV3_1__'
                } else if (flavor == flavors.ml605)
                    cCompiler.define '__BOARD_ML605__'
            }
        }
    }
}

task buildLibPcieDriver(type: Exec) {
    commandLine 'make', 'lib_pcie_driver'
    environment = ['PATH': System.getenv('PATH')]
}

task installLibPcieDriverHeaders(type: Copy) {
    dependsOn 'buildLibPcieDriver'

    from 'foreign/pcie-driver/include/pcie/lib'
    into 'tmp/include/pciDriver/lib'

    include '*.h'
}

task installLibPcieDriverBinaries(type: Copy) {
    dependsOn 'buildLibPcieDriver'

    from 'foreign/pcie-driver/lib/pcie'
    into 'tmp/lib'

    include '*.so'
    include '*.a'
}

task installLibPcieDriver {
    dependsOn 'installLibPcieDriverHeaders'
    dependsOn 'installLibPcieDriverBinaries'
}
